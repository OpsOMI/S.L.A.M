// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: messages.sql

package pgqueries

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const getMessagesByReceiver = `-- name: GetMessagesByReceiver :many
SELECT
    s.nickname AS sender_nickname,
    r.code AS room_code,
    m.content_enc
FROM
    messages AS m
JOIN users AS s ON m.sender_id = s.id
LEFT JOIN rooms AS r ON m.room_id = r.id
WHERE
    m.receiver_id = $1
ORDER BY
    m.created_at ASC
`

type GetMessagesByReceiverRow struct {
	SenderNickname string
	RoomCode       sql.NullString
	ContentEnc     string
}

func (q *Queries) GetMessagesByReceiver(ctx context.Context, receiverID uuid.UUID) ([]GetMessagesByReceiverRow, error) {
	rows, err := q.db.QueryContext(ctx, getMessagesByReceiver, receiverID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetMessagesByReceiverRow
	for rows.Next() {
		var i GetMessagesByReceiverRow
		if err := rows.Scan(&i.SenderNickname, &i.RoomCode, &i.ContentEnc); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

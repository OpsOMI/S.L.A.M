// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: rooms.sql

package pgqueries

import (
	"context"

	"github.com/google/uuid"
)

const countRoomsByOwnerID = `-- name: CountRoomsByOwnerID :one
SELECT COUNT(*) FROM rooms WHERE owner_id = $1
`

func (q *Queries) CountRoomsByOwnerID(ctx context.Context, ownerID uuid.UUID) (int64, error) {
	row := q.db.QueryRowContext(ctx, countRoomsByOwnerID, ownerID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createRoom = `-- name: CreateRoom :one
INSERT INTO rooms (
    owner_id,
    code
) VALUES (
    $1,
    $2
)
RETURNING id
`

type CreateRoomParams struct {
	OwnerID uuid.UUID
	Code    string
}

func (q *Queries) CreateRoom(ctx context.Context, arg CreateRoomParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, createRoom, arg.OwnerID, arg.Code)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const deleteRoomByID = `-- name: DeleteRoomByID :exec
DELETE FROM rooms WHERE id = $1
`

func (q *Queries) DeleteRoomByID(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteRoomByID, id)
	return err
}

const getRoomByCode = `-- name: GetRoomByCode :one
SELECT id, owner_id, code, created_at FROM rooms WHERE code = $1
`

func (q *Queries) GetRoomByCode(ctx context.Context, code string) (Room, error) {
	row := q.db.QueryRowContext(ctx, getRoomByCode, code)
	var i Room
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.Code,
		&i.CreatedAt,
	)
	return i, err
}

const getRoomByID = `-- name: GetRoomByID :one
SELECT id, owner_id, code, created_at FROM rooms WHERE id = $1
`

func (q *Queries) GetRoomByID(ctx context.Context, id uuid.UUID) (Room, error) {
	row := q.db.QueryRowContext(ctx, getRoomByID, id)
	var i Room
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.Code,
		&i.CreatedAt,
	)
	return i, err
}

const getRoomsByOwnerID = `-- name: GetRoomsByOwnerID :many
SELECT id, owner_id, code, created_at FROM rooms WHERE owner_id = $1 ORDER BY created_at DESC
`

func (q *Queries) GetRoomsByOwnerID(ctx context.Context, ownerID uuid.UUID) ([]Room, error) {
	rows, err := q.db.QueryContext(ctx, getRoomsByOwnerID, ownerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Room
	for rows.Next() {
		var i Room
		if err := rows.Scan(
			&i.ID,
			&i.OwnerID,
			&i.Code,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const isRoomExistByCode = `-- name: IsRoomExistByCode :one
SELECT EXISTS (
    SELECT 1 FROM rooms WHERE code = $1
)
`

func (q *Queries) IsRoomExistByCode(ctx context.Context, code string) (bool, error) {
	row := q.db.QueryRowContext(ctx, isRoomExistByCode, code)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const isRoomExistByID = `-- name: IsRoomExistByID :one
SELECT EXISTS (
    SELECT 1 FROM rooms WHERE id = $1
)
`

func (q *Queries) IsRoomExistByID(ctx context.Context, id uuid.UUID) (bool, error) {
	row := q.db.QueryRowContext(ctx, isRoomExistByID, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const isRoomExistByOwnerID = `-- name: IsRoomExistByOwnerID :one
SELECT EXISTS (
    SELECT 1 FROM rooms WHERE owner_id = $1
)
`

func (q *Queries) IsRoomExistByOwnerID(ctx context.Context, ownerID uuid.UUID) (bool, error) {
	row := q.db.QueryRowContext(ctx, isRoomExistByOwnerID, ownerID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

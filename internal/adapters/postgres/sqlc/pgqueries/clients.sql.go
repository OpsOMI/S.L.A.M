// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: clients.sql

package pgqueries

import (
	"context"

	"github.com/google/uuid"
)

const countClientsByUserID = `-- name: CountClientsByUserID :one
SELECT COUNT(*) FROM clients WHERE user_id = $1
`

func (q *Queries) CountClientsByUserID(ctx context.Context, userID uuid.UUID) (int64, error) {
	row := q.db.QueryRowContext(ctx, countClientsByUserID, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createClient = `-- name: CreateClient :one
INSERT INTO clients (
    user_id,
    client_key
) VALUES (
    $1,
    $2
)
RETURNING id
`

type CreateClientParams struct {
	UserID    uuid.UUID
	ClientKey uuid.UUID
}

func (q *Queries) CreateClient(ctx context.Context, arg CreateClientParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, createClient, arg.UserID, arg.ClientKey)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const deleteClient = `-- name: DeleteClient :exec
DELETE FROM clients WHERE id = $1
`

func (q *Queries) DeleteClient(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteClient, id)
	return err
}

const getClientByClientKey = `-- name: GetClientByClientKey :one
SELECT id, user_id, client_key, revoked_at, created_at FROM clients WHERE client_key = $1
`

func (q *Queries) GetClientByClientKey(ctx context.Context, clientKey uuid.UUID) (Client, error) {
	row := q.db.QueryRowContext(ctx, getClientByClientKey, clientKey)
	var i Client
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ClientKey,
		&i.RevokedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getClientByID = `-- name: GetClientByID :one
SELECT id, user_id, client_key, revoked_at, created_at FROM clients WHERE id = $1
`

func (q *Queries) GetClientByID(ctx context.Context, id uuid.UUID) (Client, error) {
	row := q.db.QueryRowContext(ctx, getClientByID, id)
	var i Client
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ClientKey,
		&i.RevokedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getClientsByUserID = `-- name: GetClientsByUserID :many
SELECT id, user_id, client_key, revoked_at, created_at FROM clients WHERE user_id = $1
`

func (q *Queries) GetClientsByUserID(ctx context.Context, userID uuid.UUID) ([]Client, error) {
	rows, err := q.db.QueryContext(ctx, getClientsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Client
	for rows.Next() {
		var i Client
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ClientKey,
			&i.RevokedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const isClientExistByClientKey = `-- name: IsClientExistByClientKey :one
SELECT EXISTS (
    SELECT 1 FROM clients WHERE client_key = $1
)
`

func (q *Queries) IsClientExistByClientKey(ctx context.Context, clientKey uuid.UUID) (bool, error) {
	row := q.db.QueryRowContext(ctx, isClientExistByClientKey, clientKey)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const isClientExistByID = `-- name: IsClientExistByID :one
SELECT EXISTS (
    SELECT 1 FROM clients WHERE id = $1
)
`

func (q *Queries) IsClientExistByID(ctx context.Context, id uuid.UUID) (bool, error) {
	row := q.db.QueryRowContext(ctx, isClientExistByID, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const isClientRevoked = `-- name: IsClientRevoked :one
SELECT EXISTS (
    SELECT 1 FROM clients WHERE id = $1 AND revoked_at IS NOT NULL
)
`

func (q *Queries) IsClientRevoked(ctx context.Context, id uuid.UUID) (bool, error) {
	row := q.db.QueryRowContext(ctx, isClientRevoked, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const revokeClient = `-- name: RevokeClient :exec
UPDATE clients
SET revoked_at = CURRENT_TIMESTAMP
WHERE id = $1
`

func (q *Queries) RevokeClient(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, revokeClient, id)
	return err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: room_members.sql

package pgqueries

import (
	"context"

	"github.com/google/uuid"
)

const addUserToRoom = `-- name: AddUserToRoom :exec
INSERT INTO room_members (
    room_id,
    user_id
) VALUES (
    $1,
    $2
)
`

type AddUserToRoomParams struct {
	RoomID uuid.UUID
	UserID uuid.UUID
}

func (q *Queries) AddUserToRoom(ctx context.Context, arg AddUserToRoomParams) error {
	_, err := q.db.ExecContext(ctx, addUserToRoom, arg.RoomID, arg.UserID)
	return err
}

const isUserInRoom = `-- name: IsUserInRoom :one
SELECT EXISTS (
    SELECT 1 FROM room_members
    WHERE room_id = $1 AND user_id = $2
)
`

type IsUserInRoomParams struct {
	RoomID uuid.UUID
	UserID uuid.UUID
}

func (q *Queries) IsUserInRoom(ctx context.Context, arg IsUserInRoomParams) (bool, error) {
	row := q.db.QueryRowContext(ctx, isUserInRoom, arg.RoomID, arg.UserID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const removeUserFromRoom = `-- name: RemoveUserFromRoom :exec
DELETE FROM room_members
WHERE room_id = $1 AND user_id = $2
`

type RemoveUserFromRoomParams struct {
	RoomID uuid.UUID
	UserID uuid.UUID
}

func (q *Queries) RemoveUserFromRoom(ctx context.Context, arg RemoveUserFromRoomParams) error {
	_, err := q.db.ExecContext(ctx, removeUserFromRoom, arg.RoomID, arg.UserID)
	return err
}
